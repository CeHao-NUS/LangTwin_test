[Instruction Start]
In the instruction, you need to sequentially finish several works. 
For each work, please use "==== Work x ===" before the answers. x is 1,2,3 and so on.
Your final answer should have both Work 1, Work 2 and Work 3.
The inputs are provided with [xxx Start] and [xxx End] outside this instruction.

[Work 1 Start]
Inputs: Robot, Scene, Task.
Outputs: Sub-tasks to finish the task.

- You are a robot arm, and you are asked to finish one task. You will get Inputs as above, and output steps to finish the task.
- The Robot input describes the physical configuration of the robot. 
- The Scene input describes the objects and their properties in the environment.
- The Task input tells the target that the robot arm need to finish.
- For each step, you should only give the sub tasks from a high-level perspective.

- You should answer like this example in tripple asterisk.

Task: put an apple into a drawer.
Answer: 
***
==== Work 1 ====
1. Open the drawer. (gripper hand is empty)
2. Pick the apple and place into the drawer. (gripper hand is empty)
3. Close the drawer. (gripper hand is empty)
***

- Note that "pick and place" must be in the same sub task. You cannot "pick" first and do not "place" the object.
- You need to check the gripper hand is empty after each sub task.
- If the task is a single sub task, such as "Open the drawer", then you should use this example in the following tripple asterisk:

Task: Open the drawer.
Answer: 
***
==== Work 1 ====
1. Open the drawer. 
***

[Work 1 End]

[Work 2 Start]
Inputs: Robot, Scene, Task, Results in Work 1.
Outputs: Detailed steps to finish the task.

- From results in work 1, you need to consider the more details to finish the task.
- You need to move the robot hand and close or open the gripper hand to manipulate object.
- When grasping the object, find the actionable part of the object. 
- When moving the object, consider the physical constraint of the object.
- In the answers, use double backtick marks to quote the movement, (e.g. ``grasp``); use angle bracket to quote the target position (e.g. <apple>).
- Use sharp symbol to quote the actionabe keywords, (e.g. #actionable#).
- Use double sharp symbol to quote the constraint key words, (e.g. ##revolute joint constraint##) 


- You should answer like this examples in tripple asterisk.

Task: put an apple into a drawer.
Answer: 
***
==== Work 2 ====
Sub-task 1: Open the drawer.
1. ``Move`` to the #actionable# <drawer handle>. 
2. ``Grasp`` the #actionable# <drawer handle>. 
3. ``Move`` to <drawer open position> with ## drawer prismatic joint constraint##. 
4. ``Release`` the gripper hand.

Sub-task 2: Pick the apple and place into the drawer.
1. ``Move``  to the #actionable# <apple>. 
2. ``Grasp`` the #actionable# <apple>.
3. ``Move`` to the <inside drawer position>.
4. ``Release`` the gripper hand.

Sub-task 3: Close the drawer.
1. ``Move`` to the <outside drawer position>.
2. ``Move`` the gripper hand to the #actionable# <drawer handle>. 
3. ``Grasp`` the #actionable# <drawer handle>. 
4. ``Move`` to <drawer close position> with ##drawer prismatic joint constraint##. 
5. ``Release`` the gripper hand.
***
[Work 2 End]

[Work 3 Start]
Inputs: Robot, Scene, Task, Perception Function, Controller Function, Results in Work 2.
Outputs: JSON file that summarize the steps to finish the task.

- From the results in Work 1, we obtain the steps to finish the task under each sub task. 
- You need to convert each step as a python dictionary with five keywords: "Perception", "Actionable", "Constraint", "Target",  "Controller".
- When one step has actionable part, for example #actionable# <apple>, the dictionary has "Actionable": ["apple"].
- When one step has constraint part, for example ##prismatic joint constraint##, the dictionary has "Constraint": ["prismatic joint"].
- To detect the actionable part and constriant, choose suitable Perception Function to obtain the "Actionable" and "Constraint".
- The available Perception Functions are provided between [Perception Start] and [Perception End]. Then the dictionary has "Perception": ["function name"].
- The keyword "Target" is the words in the angle bracket, for example <drawer close position>, the dictionary has "Target": ["drawer close position"].
- To implement the movment, choose suitable Controller Function to execute the ""Move", "Grasp" and "Release" under certain constraints.
- The available Controller Functions are provided between [Controller Start] and [Controller End]. Then the dictionary has "Controller": ["function name"].

- The template of the answer is this examples in tripple asterisk.
***
==== Work 3 ====
{
    "Task": "put an apple into a drawer."
    "Sub tasks":[
        { #
            "Sub task": "Open the drawer.",
            "Steps": [
                { #``Move`` to the #actionable# <drawer handle>.  (do not need to include comments after #)
                    "Perception": ["Detect"]
                    "Actionable": ["drawer handle"]
                    "Constraint": []
                    "Target": ["drawer handle"]
                    "Controller": ["Move"]
                }
                { #``Grasp`` the #actionable# <drawer handle>.  (do not need to include comments after #)
                    "Perception": ["Detect"]
                    "Actionable": ["drawer handle"]
                    "Constraint": []
                    "Target": ["drawer handle"]
                    "Controller": ["Graspe"]
                }
                { #``Move`` to <drawer open position> with ##drawer prismatic joint constraint##.  (do not need to include comments after #)
                    "Perception": ["Articulation model"]
                    "Actionable": []
                    "Constraint": ["drawer prismatic joint"]
                    "Target": ["drawer open position"]
                    "Controller": ["Move"]
                }
                { #``Release`` the gripper hand.  (do not need to include comments after #)
                    "Perception": []
                    "Actionable": []
                    "Constraint": []
                    "Target": []
                    "Controller": ["Release"]
                }
            ]
        }

        {
            "Sub task": "Pick the apple and place into the drawer.",
            ... # following are just neglected. Need to complete all in the answer.
        }
    ]
}
***
[Work 3 End]

[Instruction End]